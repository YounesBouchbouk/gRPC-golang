// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: greet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetService_Greet_FullMethodName             = "/greet.GreetService/Greet"
	GreetService_StreamServerGreet_FullMethodName = "/greet.GreetService/StreamServerGreet"
	GreetService_StreamClientGreet_FullMethodName = "/greet.GreetService/StreamClientGreet"
	GreetService_GreetEveryone_FullMethodName     = "/greet.GreetService/GreetEveryone"
)

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	StreamServerGreet(ctx context.Context, in *StreamServerRequest, opts ...grpc.CallOption) (GreetService_StreamServerGreetClient, error)
	StreamClientGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_StreamClientGreetClient, error)
	GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, GreetService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) StreamServerGreet(ctx context.Context, in *StreamServerRequest, opts ...grpc.CallOption) (GreetService_StreamServerGreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], GreetService_StreamServerGreet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceStreamServerGreetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_StreamServerGreetClient interface {
	Recv() (*StreamServerResponse, error)
	grpc.ClientStream
}

type greetServiceStreamServerGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceStreamServerGreetClient) Recv() (*StreamServerResponse, error) {
	m := new(StreamServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) StreamClientGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_StreamClientGreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], GreetService_StreamClientGreet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceStreamClientGreetClient{stream}
	return x, nil
}

type GreetService_StreamClientGreetClient interface {
	Send(*StreamClientRequest) error
	CloseAndRecv() (*StreamClientResponse, error)
	grpc.ClientStream
}

type greetServiceStreamClientGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceStreamClientGreetClient) Send(m *StreamClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceStreamClientGreetClient) CloseAndRecv() (*StreamClientResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], GreetService_GreetEveryone_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetEveryoneClient{stream}
	return x, nil
}

type GreetService_GreetEveryoneClient interface {
	Send(*GreetEveyoneRequest) error
	Recv() (*GreetEveyoneResponse, error)
	grpc.ClientStream
}

type greetServiceGreetEveryoneClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetEveryoneClient) Send(m *GreetEveyoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneClient) Recv() (*GreetEveyoneResponse, error) {
	m := new(GreetEveyoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	StreamServerGreet(*StreamServerRequest, GreetService_StreamServerGreetServer) error
	StreamClientGreet(GreetService_StreamClientGreetServer) error
	GreetEveryone(GreetService_GreetEveryoneServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetServiceServer) StreamServerGreet(*StreamServerRequest, GreetService_StreamServerGreetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServerGreet not implemented")
}
func (UnimplementedGreetServiceServer) StreamClientGreet(GreetService_StreamClientGreetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClientGreet not implemented")
}
func (UnimplementedGreetServiceServer) GreetEveryone(GreetService_GreetEveryoneServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetEveryone not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_StreamServerGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).StreamServerGreet(m, &greetServiceStreamServerGreetServer{stream})
}

type GreetService_StreamServerGreetServer interface {
	Send(*StreamServerResponse) error
	grpc.ServerStream
}

type greetServiceStreamServerGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceStreamServerGreetServer) Send(m *StreamServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_StreamClientGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).StreamClientGreet(&greetServiceStreamClientGreetServer{stream})
}

type GreetService_StreamClientGreetServer interface {
	SendAndClose(*StreamClientResponse) error
	Recv() (*StreamClientRequest, error)
	grpc.ServerStream
}

type greetServiceStreamClientGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceStreamClientGreetServer) SendAndClose(m *StreamClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceStreamClientGreetServer) Recv() (*StreamClientRequest, error) {
	m := new(StreamClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetEveryone(&greetServiceGreetEveryoneServer{stream})
}

type GreetService_GreetEveryoneServer interface {
	Send(*GreetEveyoneResponse) error
	Recv() (*GreetEveyoneRequest, error)
	grpc.ServerStream
}

type greetServiceGreetEveryoneServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetEveryoneServer) Send(m *GreetEveyoneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneServer) Recv() (*GreetEveyoneRequest, error) {
	m := new(GreetEveyoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServerGreet",
			Handler:       _GreetService_StreamServerGreet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamClientGreet",
			Handler:       _GreetService_StreamClientGreet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetEveryone",
			Handler:       _GreetService_GreetEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
